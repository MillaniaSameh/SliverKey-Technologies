@page "/"
@attribute [Authorize]

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Index> L
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthState

@using ContactDatabase.Shared
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<PageTitle>ContactList</PageTitle>

<div class="contact-container">
    <h2 class="@(Language=="ar" ? "arabic": "")">@L["page_title"]</h2>
    <p class="@(Language=="ar" ? "arabic": "")">@L["search_instruction"]</p>
    <input class="form-control @(Language=="ar" ? "arabic": "")" id="myInput" type="text" placeholder="@L["search"] ..." @bind="SearchTerm" @bind:event="oninput" @bind:after="() => Search()">
    <br>

    <table class="table table-striped table-responsive @(Language=="ar" ? "arabic": "")">
        <thead>
            <tr class="table-dark">
                <th scope="col"></th>
                <th scope="col">@L["first_name"]</th>
                <th scope="col">@L["last_name"]</th>
                <th scope="col">@L["email"]</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody id="myTable">
            @if (ContactsList.Count > 0)
            {
                @for (int i = 0; i < ContactsList.Count; i++)
                {
                    var contact = ContactsList[i];
                    var currentIndex = i;
                    var rowClass = i % 2 == 0 ? "even-row" : "odd-row";
                    var married = contact.MaritalStatus == true ? @L["married"] : @L["not_married"];

                    <tr class="@rowClass" role="button" @onclick="() => ToggleCollapse(currentIndex)">
                        <th scope="row">@(i + 1)</th>
                        <td>@contact.FirstName</td>
                        <td>@contact.LastName</td>
                        <td>@contact.Email</td>
                        <td>
                            <AuthorizeView Roles="Admin">
                                <button class="btn btn-dark" @onclick="() => HandleEditContact(contact.Email)">@L["edit"]</button>
                            </AuthorizeView>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="5" style="padding: 0;">
                            <div class="collapse" id="collapseArea-@i">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">@contact.Title @contact.FirstName @contact.LastName</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">@L["birth_date"]: @contact.BirthDate.ToString("yyyy-MM-dd")</h6>
                                        <h6 class="card-subtitle mb-2 text-muted">@L["marital_status"]: @married</h6>
                                        <p class="card-text">@contact.Description</p>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="@(Language=="ar" ? "arabic": "")">@L["no_contact"]</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Contact> ContactsList = new();
    private string ErrorMessage = "";
    private string SearchTerm = "";
    string Language = CultureInfo.CurrentCulture.Name.ToString();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchContacts("/contact/fetch-contacts");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void HandleEditContact(string email)
    {
        NavigationManager.NavigateTo($"/contactform?edit={true}&email={email}");
    }

    private async Task Search()
    {
        if (!string.IsNullOrEmpty(SearchTerm))
            await FetchContacts($"/contact/search-contacts?searchTerm={SearchTerm}");
        else
            await FetchContacts("/contact/fetch-contacts");
    }

    private async Task FetchContacts(string requestUri)
    {
        var response = await Http.GetAsync(requestUri);

        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            ContactsList = JsonSerializer.Deserialize<List<Contact>>(json);

            if (ContactsList != null && ContactsList.Count < 0)
                ErrorMessage = "No contacts found.";
        }
        else
        {
            ErrorMessage = "Failed to fetch the contacts.";
        }
    }

    private async Task ToggleCollapse(int index)
    {
        await JSRuntime.InvokeVoidAsync("toggleCollapse", $"collapseArea-{index}");
    }
}